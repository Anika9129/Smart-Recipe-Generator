{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass RecipeService {\n  async getAllRecipes(limit = null, page = 1) {\n    try {\n      const params = {};\n      if (limit) {\n        params.limit = limit;\n        params.page = page;\n      }\n      const response = await axios.get(`${API_BASE_URL}/recipes`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recipes:', error);\n      throw new Error('Failed to fetch recipes');\n    }\n  }\n  async getRecipeById(id) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/recipes/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recipe:', error);\n      throw new Error('Failed to fetch recipe');\n    }\n  }\n  async searchByIngredients(ingredients, exactMatch = false) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/recipes/search`, {\n        ingredients,\n        exactMatch\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching recipes:', error);\n      throw new Error('Failed to search recipes');\n    }\n  }\n  async filterRecipes(filters) {\n    try {\n      // Remove empty filters\n      const cleanFilters = {};\n      Object.keys(filters).forEach(key => {\n        if (filters[key] && filters[key] !== '' && !(Array.isArray(filters[key]) && filters[key].length === 0)) {\n          cleanFilters[key] = filters[key];\n        }\n      });\n      const response = await axios.get(`${API_BASE_URL}/recipes/filter`, {\n        params: cleanFilters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error filtering recipes:', error);\n      throw new Error('Failed to filter recipes');\n    }\n  }\n  async rateRecipe(recipeId, rating, userId = 'anonymous') {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/recipes/${recipeId}/rate`, {\n        rating,\n        userId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error rating recipe:', error);\n      throw new Error('Failed to rate recipe');\n    }\n  }\n  async getRecommendations(availableIngredients = [], dietaryPreferences = [], limit = 5) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/recipes/recommendations`, {\n        availableIngredients,\n        dietaryPreferences,\n        limit\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting recommendations:', error);\n      throw new Error('Failed to get recommendations');\n    }\n  }\n  async getIngredientSuggestions(input) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/ingredients/suggestions`, {\n        params: {\n          input\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting ingredient suggestions:', error);\n      return {\n        suggestions: []\n      };\n    }\n  }\n}\nexport const recipeService = new RecipeService();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","RecipeService","getAllRecipes","limit","page","params","response","get","data","error","console","Error","getRecipeById","id","searchByIngredients","ingredients","exactMatch","post","filterRecipes","filters","cleanFilters","Object","keys","forEach","key","Array","isArray","length","rateRecipe","recipeId","rating","userId","getRecommendations","availableIngredients","dietaryPreferences","getIngredientSuggestions","input","suggestions","recipeService"],"sources":["C:/Users/singh/OneDrive/Desktop/daffodil/smart-recipe-generator/frontend/src/services/recipeService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass RecipeService {\r\n  async getAllRecipes(limit = null, page = 1) {\r\n    try {\r\n      const params = {};\r\n      if (limit) {\r\n        params.limit = limit;\r\n        params.page = page;\r\n      }\r\n      \r\n      const response = await axios.get(`${API_BASE_URL}/recipes`, { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching recipes:', error);\r\n      throw new Error('Failed to fetch recipes');\r\n    }\r\n  }\r\n\r\n  async getRecipeById(id) {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/recipes/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching recipe:', error);\r\n      throw new Error('Failed to fetch recipe');\r\n    }\r\n  }\r\n\r\n  async searchByIngredients(ingredients, exactMatch = false) {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/recipes/search`, {\r\n        ingredients,\r\n        exactMatch\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error searching recipes:', error);\r\n      throw new Error('Failed to search recipes');\r\n    }\r\n  }\r\n\r\n  async filterRecipes(filters) {\r\n    try {\r\n      // Remove empty filters\r\n      const cleanFilters = {};\r\n      Object.keys(filters).forEach(key => {\r\n        if (filters[key] && filters[key] !== '' && \r\n            !(Array.isArray(filters[key]) && filters[key].length === 0)) {\r\n          cleanFilters[key] = filters[key];\r\n        }\r\n      });\r\n\r\n      const response = await axios.get(`${API_BASE_URL}/recipes/filter`, {\r\n        params: cleanFilters\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error filtering recipes:', error);\r\n      throw new Error('Failed to filter recipes');\r\n    }\r\n  }\r\n\r\n  async rateRecipe(recipeId, rating, userId = 'anonymous') {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/recipes/${recipeId}/rate`, {\r\n        rating,\r\n        userId\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error rating recipe:', error);\r\n      throw new Error('Failed to rate recipe');\r\n    }\r\n  }\r\n\r\n  async getRecommendations(availableIngredients = [], dietaryPreferences = [], limit = 5) {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/recipes/recommendations`, {\r\n        availableIngredients,\r\n        dietaryPreferences,\r\n        limit\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error getting recommendations:', error);\r\n      throw new Error('Failed to get recommendations');\r\n    }\r\n  }\r\n\r\n  async getIngredientSuggestions(input) {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/ingredients/suggestions`, {\r\n        params: { input }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error getting ingredient suggestions:', error);\r\n      return { suggestions: [] };\r\n    }\r\n  }\r\n}\r\n\r\nexport const recipeService = new RecipeService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}