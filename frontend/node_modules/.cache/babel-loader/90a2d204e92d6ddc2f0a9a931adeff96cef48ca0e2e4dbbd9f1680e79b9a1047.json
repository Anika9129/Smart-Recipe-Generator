{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nclass RecipeService {\n  async getAllRecipes(limit = null, page = 1) {\n    try {\n      const response = await axios.get(`${API_URL}/recipes`, {\n        params: {\n          limit,\n          page\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recipes:', error);\n      throw new Error('Failed to fetch recipes');\n    }\n  }\n  async getRecipeById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/recipes/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recipe:', error);\n      throw new Error('Failed to fetch recipe');\n    }\n  }\n  async searchByIngredients(ingredients, exactMatch = false) {\n    try {\n      const response = await axios.post(`${API_URL}/recipes/search`, {\n        ingredients,\n        exactMatch\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching recipes:', error);\n      throw new Error('Failed to search recipes');\n    }\n  }\n  async filterRecipes(filters) {\n    try {\n      const response = await axios.get(`${API_URL}/recipes/filter`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error filtering recipes:', error);\n      throw new Error('Failed to filter recipes');\n    }\n  }\n  async rateRecipe(recipeId, rating, userId = 'anonymous') {\n    try {\n      const response = await axios.post(`${API_URL}/recipes/${recipeId}/rate`, {\n        rating,\n        userId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error rating recipe:', error);\n      throw new Error('Failed to rate recipe');\n    }\n  }\n  async getRecommendations(availableIngredients = [], dietaryPreferences = [], limit = 5) {\n    try {\n      const response = await axios.post(`${API_URL}/recipes/recommendations`, {\n        availableIngredients,\n        dietaryPreferences,\n        limit\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting recommendations:', error);\n      throw new Error('Failed to get recommendations');\n    }\n  }\n  async getIngredientSuggestions(input) {\n    try {\n      const response = await axios.get(`${API_URL}/ingredients/suggestions`, {\n        params: {\n          input\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting ingredient suggestions:', error);\n      return {\n        suggestions: []\n      };\n    }\n  }\n  async searchWithFilters(ingredients = [], filters = {}) {\n    try {\n      // This method can be simplified to use the filterRecipes endpoint\n      // assuming the backend can handle both ingredients and other filters.\n      // For now, we'll just use the existing filter endpoint.\n      const response = await axios.get(`${API_L_URL}/recipes/filter`, {\n        params: {\n          ...filters,\n          ingredients: ingredients.join(',')\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching with filters:', error);\n      throw new Error('Failed to search recipes');\n    }\n  }\n}\nexport const recipeService = new RecipeService();","map":{"version":3,"names":["axios","API_URL","RecipeService","getAllRecipes","limit","page","response","get","params","data","error","console","Error","getRecipeById","id","searchByIngredients","ingredients","exactMatch","post","filterRecipes","filters","rateRecipe","recipeId","rating","userId","getRecommendations","availableIngredients","dietaryPreferences","getIngredientSuggestions","input","suggestions","searchWithFilters","API_L_URL","join","recipeService"],"sources":["C:/Users/singh/OneDrive/Desktop/daffodil/smart-recipe-generator/frontend/src/services/recipeService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\nclass RecipeService {\n  async getAllRecipes(limit = null, page = 1) {\n    try {\n      const response = await axios.get(`${API_URL}/recipes`, {\n        params: { limit, page },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recipes:', error);\n      throw new Error('Failed to fetch recipes');\n    }\n  }\n\n  async getRecipeById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/recipes/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recipe:', error);\n      throw new Error('Failed to fetch recipe');\n    }\n  }\n\n  async searchByIngredients(ingredients, exactMatch = false) {\n    try {\n      const response = await axios.post(`${API_URL}/recipes/search`, {\n        ingredients,\n        exactMatch,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching recipes:', error);\n      throw new Error('Failed to search recipes');\n    }\n  }\n\n  async filterRecipes(filters) {\n    try {\n      const response = await axios.get(`${API_URL}/recipes/filter`, {\n        params: filters,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error filtering recipes:', error);\n      throw new Error('Failed to filter recipes');\n    }\n  }\n\n  async rateRecipe(recipeId, rating, userId = 'anonymous') {\n    try {\n      const response = await axios.post(`${API_URL}/recipes/${recipeId}/rate`, {\n        rating,\n        userId,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error rating recipe:', error);\n      throw new Error('Failed to rate recipe');\n    }\n  }\n\n  async getRecommendations(\n    availableIngredients = [],\n    dietaryPreferences = [],\n    limit = 5\n  ) {\n    try {\n      const response = await axios.post(`${API_URL}/recipes/recommendations`, {\n        availableIngredients,\n        dietaryPreferences,\n        limit,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting recommendations:', error);\n      throw new Error('Failed to get recommendations');\n    }\n  }\n\n  async getIngredientSuggestions(input) {\n    try {\n      const response = await axios.get(\n        `${API_URL}/ingredients/suggestions`,\n        {\n          params: { input },\n        }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error getting ingredient suggestions:', error);\n      return { suggestions: [] };\n    }\n  }\n\n  async searchWithFilters(ingredients = [], filters = {}) {\n    try {\n      // This method can be simplified to use the filterRecipes endpoint\n      // assuming the backend can handle both ingredients and other filters.\n      // For now, we'll just use the existing filter endpoint.\n      const response = await axios.get(`${API_L_URL}/recipes/filter`, {\n        params: { ...filters, ingredients: ingredients.join(',') },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching with filters:', error);\n      throw new Error('Failed to search recipes');\n    }\n  }\n}\n\nexport const recipeService = new RecipeService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}